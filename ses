#!/usr/bin/python
# coding: utf-8
import logging
from sys import argv
import urllib2
import tempfile
import imp

log = logging.getLogger("ses")
repos = [
    "http://localhost:6005",
    "http://sunday.zone/ses/"
]


def debug():
    return False


if debug():
    logging.basicConfig()
    log.setLevel(logging.DEBUG)
else:
    logging.basicConfig()
    log.setLevel(logging.INFO)


# The only reason why implementing this instead of using python-request
# - or other fancy http libs - is to avoid any external libraries, so
# that it can easily be installed.
def httpdownload(url):
    if not url.startswith("http://"):
        url = "http://" + url

    try:
        response = urllib2.urlopen(url)
        if response.getcode() != 200:
            return None
        return response.read()
    except Exception:
        print("'{}' not found.".format(url))
        return None
    # TODO: Figure out what exactly urlopen can give of exceptions,
    # and print out better error messages.


def getarg(i):
    try:
        return argv[i]
    except:
        return None


def getrestofargs(i):
    try:
        return argv[i:]
    except:
        return []


def betterexec(script):
    """ This takes a script string and import it as a file """
    scriptfile = tempfile.NamedTemporaryFile()
    scriptfile.write(script)
    scriptfile.flush()
    obj =imp.load_source("name", scriptfile.name)
    scriptfile.close()
    return obj


def getscript(torun):
    for repo in repos:
        print("Trying repository '{}'".format(repo))
        if not repo.endswith("/"):
            repo += "/"
        script = httpdownload(repo + torun)
        if script is None:
            print("Not found.")
        else:
            print("FOUND  {} script!".format(torun))
            return script
    return None


def main():
    cmd = getarg(1)
    if cmd == "run":
        scriptname = getarg(2)
        scriptargs = getrestofargs(3)
        script = getscript(scriptname)
        if script is not None:
            print("Running script")
            betterexec(script).main(scriptargs)
        else:
            print("Could not find script")
    elif cmd == "info":
        scriptname = getarg(2)
        script = getscript(scriptname)
        if script is not None:
            print(betterexec(script).__doc__)
        else:
            print("Could not find script")
    else:
        print("Wrong arguments. Right now ses only supports ses run <script>")


if __name__ == "__main__":
    main()
